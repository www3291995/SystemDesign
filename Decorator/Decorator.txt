Motivation

--Want to augment an object with additional functionality
--Do not want to rewrite or alter existing code (OCP)
--Want to keep new functionality separate (SRP)
--Need to be able to interact with existing structures
--Two options:
	--Inhert from required object if possible; some objects are sealed
	--Build a Decorator, which simply references the decorated objects


Decorator
--Facilitates the addition of behaviors to individual objects without inheriting from them.


Summary

--A decorator keeps the reference to the decorated object(s)
--May or may not proxy over calls
	--Use R# Generate Delegated Members
--Exists in a static variation
	--X<Y<Foo>>
	--Very limited due to inability to inherit from type parameters