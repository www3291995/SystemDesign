Motivation

--You are calling foo.Bar()
--This assumes that foo is in the same process as Bar()
--What if, later on, you want to put all Foo-realted operations into a seperate process
	--Can you avoid changing your code?
--Proxy to the secure
	--Same interface, entirely different behavior
--This is called a communication proxy


Proxy
--A class that functions as an interface to a particular resource. That resource may be remote, expensive to 
  construct, or may require logging or some other added functionality.


Proxy vs. Decorator

--Proxy provides an identical interface; decorator provides an enhanced interface
--Decorator typically aggregates(or has reference to) what it is decorating; proxy doesn't have to
--Proxy might not event be working with a materialized object


Summary

--A proxy has the same interface as the underlying object
--To create a proxy, simply replicate the existing interface of an object
--Add relevant functionality to the redefined member functions
--Different proxies (communication, logging, caching, etc.) have completely different behaviors