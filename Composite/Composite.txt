Motivation

--Objects use other objects fields/properties/members through inheritance and composition
--Composition lets us make compound objects
	--E.g., a mathematical expression composed of simple expressions; or 
	--A grouping of shapes that consists of several shapes
--Composite design pattern is used to treat both single (scalar) and composite objects uniformly
	--E.e., Foo and Collection<Foo> have common APIs


Composite
--A mechanism for treating individual (scalar) objects and compositions of objects in a uniform manner.


Summary


--Objects can use other objects via inheritance/composition
--Some composed and singular objects need similar/identical behaviors
--Composite design pattern lets us treat both types of objects uniformly
--C# has special support for the enumeration concept
--A single object can masquerade as a collection with yield return this